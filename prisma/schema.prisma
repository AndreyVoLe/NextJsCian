// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling // uses a direct connection
}


model User {
  id        String     @id @default(cuid()) // Уникальный идентификатор
  email     String     @unique // Электронная почта (уникальная)
  emailVerified DateTime?
  username  String?     // Имя пользователя
  image     String?  
  password  String?  // Изображение (опционально)
  accounts Account[]
  properties Property[] @relation("properties")
  bookmarks String[]
  sentMessages   Message[]  @relation("sentMessages") // Отправленные сообщения
  receivedMessages Message[] @relation("receivedMessages") // Полученные сообщения
   // Закладки на объекты недвижимости
  createdAt DateTime   @default(now()) // Дата создания
  updatedAt DateTime   @updatedAt 
  // Дата обновления
}

model Property {
  id          String       @id @default(cuid()) // Уникальный идентификатор
  owner       User         @relation("properties", fields: [ownerId], references: [id]) // Владелец
  ownerId     String       // ID владельца
  name        String       // Название
  type        String       // Тип недвижимости
  description String?      // Описание (опционально)
  location    Location?     @relation("location")// Местоположение
  beds        Int          // Количество спален
  baths       Int          // Количество ванных комнат
  squareFeet  Int          // Площадь в квадратных футах
  amenities   String[]     // Удобства (массив строк)
  rates       Rates?        @relation("rates")// Цены
  sellerInfo  SellerInfo?   @relation("sellerinfo") // Информация о продавце
  images      String[]     // Изображения (массив строк)
  isFeatured  Boolean      @default(false)
  messages  Message[]     @relation
  createdAt   DateTime     @default(now()) // Дата создания
  updatedAt   DateTime     @updatedAt // Дата обновления
}

model Location {
  id         String     @id @default(cuid())
  propertyId String     @unique // Убедитесь, что это действительно необходимо
  property   Property   @relation("location", fields: [propertyId], references: [id], map: "locProp")
  street     String // Улица
  city       String // Город
  state      String // Штат
  zipcode    String // Почтовый индекс
}

model Rates {
  id          String       @id @default(cuid())
  propertyId  String       @unique // Убедитесь, что это действительно необходимо
  property    Property     @relation("rates", fields: [propertyId], references: [id], map: "rateProp")
  nightly     Float? // Ночная цена (опционально)
  weekly      Float? // Цены за неделю (опционально)
  monthly     Float? // Цены за месяц (опционально)
}

model SellerInfo {
  id          String       @id @default(cuid())
  propertyId  String       @unique // Убедитесь, что это действительно необходимо
  property    Property     @relation("sellerinfo", fields: [propertyId], references: [id], map: "sellProp")
  name        String // Имя продавца
  email       String // Электронная почта
  phone       String // Телефон
}

model Message {
  id          String   @id @default(cuid()) // Уникальный идентификатор
  senderId    String   // ID отправителя
  sender      User     @relation("sentMessages", fields: [senderId], references: [id]) // Отправитель
  recipientId String   // ID получателя
  recipient   User     @relation("receivedMessages", fields: [recipientId], references: [id]) // Получатель
  propertyId  String   // ID недвижимости
  property    Property @relation(fields: [propertyId], references: [id]) // Недвижимость
  name        String   // Имя
  email       String   // Электронная почта
  phone       String?  // Телефон (опционально)
  body        String?  // Сообщение (опционально)
  read        Boolean  @default(false) // Прочитано ли сообщение
  createdAt   DateTime @default(now()) // Дата создания
  updatedAt   DateTime @updatedAt // Дата обновления
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}