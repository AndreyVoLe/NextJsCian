

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") 
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String     @id @default(cuid()) 
  email     String     @unique 
  emailVerified DateTime?
  name  String?     
  image     String?  
  password  String?  
  role      UserRole  @default(USER)
  accounts Account[]
  properties Property[] @relation("properties")
  
  bookmarks String[]
  sentMessages   Message[]  @relation("sentMessages") 
  receivedMessages Message[] @relation("receivedMessages") 
   
  createdAt DateTime   @default(now()) 
  updatedAt DateTime   @updatedAt 
  
}

model Property {
  id          String       @id @default(cuid()) 
  owner       User         @relation("properties", fields: [ownerId], references: [id]) 
  ownerId     String       
  name        String       
  type        String       
  description String?     
  location    Location?     @relation("location")
  beds        Int          
  baths       Int          
  squareFeet  Int          
  amenities   String[]     
  rates       Rates?        @relation("rates")
  sellerInfo  SellerInfo?   @relation("sellerinfo")
  images      String[]     
  isFeatured  Boolean      @default(false)
  messages  Message[]     @relation
  createdAt   DateTime     @default(now()) 
  updatedAt   DateTime     @updatedAt 
}

model Location {
  id         String     @id @default(cuid())
  propertyId String     @unique 
  property   Property   @relation("location", fields: [propertyId], references: [id], map: "locProp")
  street     String 
  city       String 
  state      String 
  zipcode    String 
}

model Rates {
  id          String       @id @default(cuid())
  propertyId  String       @unique 
  property    Property     @relation("rates", fields: [propertyId], references: [id], map: "rateProp")
  nightly     Float? 
  weekly      Float? 
  monthly     Float? 
}

model SellerInfo {
  id          String       @id @default(cuid())
  propertyId  String       @unique 
  property    Property     @relation("sellerinfo", fields: [propertyId], references: [id], map: "sellProp")
  name        String 
  email       String 
  phone       String 
}

model Message {
  id          String   @id @default(cuid()) 
  senderId    String   
  sender      User     @relation("sentMessages", fields: [senderId], references: [id]) 
  recipientId String   
  recipient   User     @relation("receivedMessages", fields: [recipientId], references: [id]) 
  propertyId  String   
  property    Property @relation(fields: [propertyId], references: [id]) 
  name        String   
  email       String   
  phone       String?  
  body        String?  
  read        Boolean  @default(false) 
  createdAt   DateTime @default(now()) 
  updatedAt   DateTime @updatedAt 
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}